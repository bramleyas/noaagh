module.exports = {
  alerts: function alerts() {fetch(`https://api.weather.gov/alerts`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsActive: function alertsActive() {fetch(`https://api.weather.gov/alerts/active`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsActiveCount: function alertsActiveCount() {fetch(`https://api.weather.gov/alerts`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsActiveZone: function alertsActiveZone(zoneId) {fetch(`https://api.weather.gov/alerts/active/zone/${zoneId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsActiveArea: function alertsActiveArea(area) {fetch(`https://api.weather.gov/alerts/active/area/${area}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsActiveRegion: function alertsActiveRegion(region) {fetch(`https://api.weather.gov/alerts/active/region/${region}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsTypes: function alertsTypes() {fetch(`https://api.weather.gov/alerts/types`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  alertsId: function alertsId(id) {fetch(`https://api.weather.gov/alerts/${id}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationCwsus: function aviationCwsus(cwsuId) {fetch(`https://api.weather.gov/aviation/cwsus/${cwsuId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationCwsusCwsuidCwas: function aviationCwsusCwsuidCwas(cwsuId) {fetch(`https://api.weather.gov/aviation/cwsus/${cwsuId}/cwas`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationCwsusCwsuidCwasDateSequence: function aviationCwsusCwsuidCwasDateSequence(cwsuId, date, sequence) {fetch(`https://api.weather.gov/aviation/cwsus/${cwsuId}/cwas/${date}/${sequence}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationSigmets: function alerts() {fetch(`https://api.weather.gov/aviation/sigmets`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationSigmetsAtsu: function aviationSigmetsAtsu(atsu) {fetch(`https://api.weather.gov/aviation/sigmets/${atsu}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationSigmetsAtsuDate: function aviationSigmetsAtsuDate(atsu, date) {fetch(`https://api.weather.gov/aviation/sigmets/${atsu}/${date}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  aviationSigmetsAtsuDateTime: function aviationSigmetsAtsuDateTime(atsu, date, time) {fetch(`https://api.weather.gov/aviation/sigmets/${atsu}/${date}/${time}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  glossary: function glossary() {fetch(`https://api.weather.gov/glossary`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  gridpointsWfoXY: function gridpointsWfoXY(wfo, x, y) {fetch(`https://api.weather.gov/gridpoints/${wfo}/${x},${y}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  gridpointsWfoXYForecast: function gridpointsWfoXYForecast(wfo, x, y) {fetch(`https://api.weather.gov/gridpoints/${wfo}/${x},${y}/forecast`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  gridpointsWfoXYForecastHourly: function gridpointsWfoXYForecastHourly(wfo, x, y) {fetch(`https://api.weather.gov/gridpoints/${wfo}/${x},${y}/forecast/hourly`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  gridpointsWfoXYStations: function gridpointsWfoXYStations() {fetch(`https://api.weather.gov/gridpoints/${wfo}/${x},${y}/stations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationidObservations: function stationsStationidObservations(stationId) {fetch(`https://api.weather.gov/stations/${stationId}/observations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationidObservationsLatest: function stationsStationidObservationsLatest(stationId) {fetch(`https://api.weather.gov/stations/${stationId}/observations/latest`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationidObservationsTime: function stationsStationidTime(stationId, time) {fetch(`https://api.weather.gov/stations/${stationId}/${time}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationidTafs: function stationsStationidTafs(stationId) {fetch(`https://api.weather.gov/stations/${stationId}/tafs`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationidTafsDateTime: function stationsStationidTafsDateTime(stationId, date, time) {fetch(`https://api.weather.gov/stations/${stationId}/tafs/${date}/${time}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stations: function stations() {fetch(`https://api.weather.gov/stations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  stationsStationid: function stationsStationid(stationId) {fetch(`https://api.weather.gov/stations/${stationId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  offices: function offices(officeId) {fetch(`https://api.weather.gov/offices/${stationId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  officesOfficeidHeadlinesHeadline: function officesOfficeidHeadlinesHeadline(officeId, headlineId) {fetch(`https://api.weather.gov/offices/${officeId}/headlines/${headlineId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  officesOfficeidHeadlines: function officesOfficeidHeadlines(officeId) {fetch(`https://api.weather.gov/offices/${officeId}/headlines`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  points: function points(point) {fetch(`https://api.weather.gov/points/${point}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarServers: function radarServers() {fetch(`https://api.weather.gov/radar/servers`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarServersId: function radarServersId(id) {fetch(`https://api.weather.gov/radar/servers/${id}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarStations: function radarStations() {fetch(`https://api.weather.gov/radar/stations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarStationsStationid: function radarStationsStationid(stationId) {fetch(`https://api.weather.gov/radar/stations/${stationId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarStationsStationidAlarms: function radarStationsStationidAlarms(stationId) {fetch(`https://api.weather.gov/radar/stations/${stationId}/alarms`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarQueues: function radarQueues(host) {fetch(`https://api.weather.gov/radar/queues/${host}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  radarProfilers: function radarProfiles(stationId) {fetch(`https://api.weather.gov/radar/profilers/${stationId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  products: function products() {fetch(`https://api.weather.gov/products`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsLocations: function productsLocations() {fetch(`https://api.weather.gov/productsLocations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsTypes: function productsTypes() {fetch(`https://api.weather.gov/products/types`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsProductid: function productsProductid(productId) {fetch(`https://api.weather.gov/products/${productId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsTypesTypeid: function productsTypeTypeid(typeId) {fetch(`https://api.weather.gov/products/types/${typeId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsTypesTypeidLocations: function productsTypeTypeidLocations(typeId) {fetch(`https://api.weather.gov/products/types/${typeId}/locations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsLocationsLocationidTypes: function productsLocationsLocationidTypes(locationId) {fetch(`https://api.weather.gov/products/locations/${locationId}/types`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  productsTypesTypeidLocationsLocationid: function productsTypesTypeidLocationsLocationid(typeId, locationId) {fetch(`https://api.weather.gov/products/types/${typeId}/locations/${locationId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zones: function zones() {fetch(`https://api.weather.gov/zones`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zonesType: function zonesType(type) {fetch(`https://api.weather.gov/zones/${type}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zonesTypeZoneid: function zonesTypeZoneid(type, zoneId) {fetch(`https://api.weather.gov/zones/${type}/${zoneId}`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zonesTypeZoneidForecast: function zonesTypeZoneidForecast(type, zoneId) {fetch(`https://api.weather.gov/zones/${type}/${zoneId}/forecast`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zonesForecastZoneidObservations: function zonesForecastZoneidObservations(zoneId) {fetch(`https://api.weather.gov/zones/forecast/${zoneId}/observations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  zonesForecastZoneidStations: function zonesForecastZoneidStations(zoneId) {fetch(`https://api.weather.gov/zones/forecast/${zoneId}/stations`).then(res => {return res.json()}).then(data => {console.log(data);}).catch(error => {console.log(error);});},
  helloWorld: function helloWorld() {console.log("Hello World")}
};